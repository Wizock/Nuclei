The upload response status code is 500 and the body is <!DOCTYPE html>
<html>
  <head>
    <title>FileNotFoundError: [Errno 2] No such file or directory: 'H:\\_webdev\\python+flutter\\Nuclei\\nuclei_backend\\storage_sequencer\\temp_\\tempf8734688-8c9d-43ce-8866-d97cf5dae6c1.txt'
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "lGfgdOeg2sCLWQV3PKUE";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>FileNotFoundError</h1>
<div class="detail">
  <p class="errormsg">FileNotFoundError: [Errno 2] No such file or directory: &#x27;H:\\_webdev\\python+flutter\\Nuclei\\nuclei_backend\\storage_sequencer\\temp_\\tempf8734688-8c9d-43ce-8866-d97cf5dae6c1.txt&#x27;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2376329897104">
  <h4>File <cite class="filename">"C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2095</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2376330501632">
  <h4>File <cite class="filename">"C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2080</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2376330501744">
  <h4>File <cite class="filename">"C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">165</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#x27;intercept_exceptions&#x27;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#x27;handle_exception&#x27;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-2376330504656">
  <h4>File <cite class="filename">"C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2077</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2376330504768">
  <h4>File <cite class="filename">"C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1525</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-2376330504880">
  <h4>File <cite class="filename">"C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">165</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#x27;intercept_exceptions&#x27;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#x27;handle_exception&#x27;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-2376330504992">
  <h4>File <cite class="filename">"C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1523</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2376330505104">
  <h4>File <cite class="filename">"C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1509</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2376330505216">
  <h4>File <cite class="filename">"C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\celery\local.py"</cite>,
      line <em class="line">188</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __hash__(self):</pre>
<pre class="line before"><span class="ws">        </span>return hash(self._get_current_object())</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, *a, **kw):</pre>
<pre class="line current"><span class="ws">        </span>return self._get_current_object()(*a, **kw)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __len__(self):</pre>
<pre class="line after"><span class="ws">        </span>return len(self._get_current_object())</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __getitem__(self, i):</pre></div>
</div>

<li><div class="frame" id="frame-2376330549776">
  <h4>File <cite class="filename">"C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\celery\app\task.py"</cite>,
      line <em class="line">392</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, *args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>_task_stack.push(self)</pre>
<pre class="line before"><span class="ws">        </span>self.push_request(args=args, kwargs=kwargs)</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>return self.run(*args, **kwargs)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self.pop_request()</pre>
<pre class="line after"><span class="ws">            </span>_task_stack.pop()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __reduce__(self):</pre></div>
</div>

<li><div class="frame" id="frame-2376330621024">
  <h4>File <cite class="filename">"H:\_webdev\python+flutter\Nuclei\nuclei_backend\storage_sequencer\upload.py"</cite>,
      line <em class="line">82</em>,
      in <code class="function">ipfs_upload</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &quot;Error: No file selected.&quot;</pre>
<pre class="line before"><span class="ws">    </span># check if the file is one of the allowed types/extensions</pre>
<pre class="line before"><span class="ws">    </span># if file and allowed_file(file.filename):</pre>
<pre class="line before"><span class="ws">    </span># file is allowed, move it to the upload folder</pre>
<pre class="line before"><span class="ws">    </span>filename = secure_filename(file.filename)</pre>
<pre class="line current"><span class="ws">    </span>ipfs_hash = produce_cid(file)</pre>
<pre class="line after"><span class="ws">    </span>logging.info(f&quot;IPFS hash: {ipfs_hash}&quot;)</pre>
<pre class="line after"><span class="ws">    </span>ipfs_hash = ipfs_hash</pre>
<pre class="line after"><span class="ws">    </span>if ipfs_hash == &quot;Error: IPFS hash not found.&quot;:</pre>
<pre class="line after"><span class="ws">        </span>return ipfs_hash</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2376330622256">
  <h4>File <cite class="filename">"C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\contextlib.py"</cite>,
      line <em class="line">281</em>,
      in <code class="function">helper</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>finally:</pre>
<pre class="line before"><span class="ws">            </span>&lt;cleanup&gt;</pre>
<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">    </span>@wraps(func)</pre>
<pre class="line before"><span class="ws">    </span>def helper(*args, **kwds):</pre>
<pre class="line current"><span class="ws">        </span>return _GeneratorContextManager(func, args, kwds)</pre>
<pre class="line after"><span class="ws">    </span>return helper</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def asynccontextmanager(func):</pre>
<pre class="line after"><span class="ws">    </span>&quot;&quot;&quot;@asynccontextmanager decorator.</pre></div>
</div>

<li><div class="frame" id="frame-2376330698912">
  <h4>File <cite class="filename">"C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\contextlib.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>class _GeneratorContextManagerBase:</pre>
<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;Shared functionality for @contextmanager and @asynccontextmanager.&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __init__(self, func, args, kwds):</pre>
<pre class="line current"><span class="ws">        </span>self.gen = func(*args, **kwds)</pre>
<pre class="line after"><span class="ws">        </span>self.func, self.args, self.kwds = func, args, kwds</pre>
<pre class="line after"><span class="ws">        </span># Issue 19330: ensure context manager instances have good docstrings</pre>
<pre class="line after"><span class="ws">        </span>doc = getattr(func, &quot;__doc__&quot;, None)</pre>
<pre class="line after"><span class="ws">        </span>if doc is None:</pre>
<pre class="line after"><span class="ws">            </span>doc = type(self).__doc__</pre></div>
</div>

<li><div class="frame" id="frame-2376330699024">
  <h4>File <cite class="filename">"C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\celery\local.py"</cite>,
      line <em class="line">188</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __hash__(self):</pre>
<pre class="line before"><span class="ws">        </span>return hash(self._get_current_object())</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, *a, **kw):</pre>
<pre class="line current"><span class="ws">        </span>return self._get_current_object()(*a, **kw)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __len__(self):</pre>
<pre class="line after"><span class="ws">        </span>return len(self._get_current_object())</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __getitem__(self, i):</pre></div>
</div>

<li><div class="frame" id="frame-2376330699136">
  <h4>File <cite class="filename">"C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\celery\app\task.py"</cite>,
      line <em class="line">392</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, *args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>_task_stack.push(self)</pre>
<pre class="line before"><span class="ws">        </span>self.push_request(args=args, kwargs=kwargs)</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>return self.run(*args, **kwargs)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self.pop_request()</pre>
<pre class="line after"><span class="ws">            </span>_task_stack.pop()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __reduce__(self):</pre></div>
</div>

<li><div class="frame" id="frame-2376330699248">
  <h4>File <cite class="filename">"H:\_webdev\python+flutter\Nuclei\nuclei_backend\storage_sequencer\upload.py"</cite>,
      line <em class="line">49</em>,
      in <code class="function">produce_cid</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>unique_id = str(uuid.uuid4())</pre>
<pre class="line before"><span class="ws">    </span>file_type = str(file).split(&quot;.&quot;)[-1]</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>os.system(f&quot;ipfs add --quiet --pin {file}.{file_type} &gt; temp_/temp{unique_id}.txt&quot;)</pre>
<pre class="line current"><span class="ws">    </span>with open(</pre>
<pre class="line after"><span class="ws">        </span>pathlib.Path(storage_sequencer_controller.config.TEMP_FOLDER).joinpath(</pre>
<pre class="line after"><span class="ws">            </span>f&quot;temp{unique_id}.txt&quot;</pre>
<pre class="line after"><span class="ws">        </span>),</pre>
<pre class="line after"><span class="ws">        </span>&quot;r&quot;,</pre>
<pre class="line after"><span class="ws">    </span>) as f:</pre></div>
</div>
</ul>
  <blockquote>FileNotFoundError: [Errno 2] No such file or directory: &#x27;H:\\_webdev\\python+flutter\\Nuclei\\nuclei_backend\\storage_sequencer\\temp_\\tempf8734688-8c9d-43ce-8866-d97cf5dae6c1.txt&#x27;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py&quot;, line 2095, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py&quot;, line 2080, in wsgi_app
    response = self.handle_exception(e)
  File &quot;C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask_cors\extension.py&quot;, line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File &quot;C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py&quot;, line 2077, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py&quot;, line 1525, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask_cors\extension.py&quot;, line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File &quot;C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py&quot;, line 1523, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py&quot;, line 1509, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\celery\local.py&quot;, line 188, in __call__
    return self._get_current_object()(*a, **kw)
  File &quot;C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\celery\app\task.py&quot;, line 392, in __call__
    return self.run(*args, **kwargs)
  File &quot;H:\_webdev\python+flutter\Nuclei\nuclei_backend\storage_sequencer\upload.py&quot;, line 82, in ipfs_upload
    ipfs_hash = produce_cid(file)
  File &quot;C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\contextlib.py&quot;, line 281, in helper
    return _GeneratorContextManager(func, args, kwds)
  File &quot;C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\contextlib.py&quot;, line 103, in __init__
    self.gen = func(*args, **kwds)
  File &quot;C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\celery\local.py&quot;, line 188, in __call__
    return self._get_current_object()(*a, **kw)
  File &quot;C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\celery\app\task.py&quot;, line 392, in __call__
    return self.run(*args, **kwargs)
  File &quot;H:\_webdev\python+flutter\Nuclei\nuclei_backend\storage_sequencer\upload.py&quot;, line 49, in produce_cid
    with open(
FileNotFoundError: [Errno 2] No such file or directory: &#x27;H:\\_webdev\\python+flutter\\Nuclei\\nuclei_backend\\storage_sequencer\\temp_\\tempf8734688-8c9d-43ce-8866-d97cf5dae6c1.txt&#x27;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py", line 2095, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py", line 2080, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask_cors\extension.py", line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py", line 2077, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py", line 1525, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask_cors\extension.py", line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py", line 1523, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\flask\app.py", line 1509, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\celery\local.py", line 188, in __call__
    return self._get_current_object()(*a, **kw)
  File "C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\celery\app\task.py", line 392, in __call__
    return self.run(*args, **kwargs)
  File "H:\_webdev\python+flutter\Nuclei\nuclei_backend\storage_sequencer\upload.py", line 82, in ipfs_upload
    ipfs_hash = produce_cid(file)
  File "C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\contextlib.py", line 281, in helper
    return _GeneratorContextManager(func, args, kwds)
  File "C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\contextlib.py", line 103, in __init__
    self.gen = func(*args, **kwds)
  File "C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\celery\local.py", line 188, in __call__
    return self._get_current_object()(*a, **kw)
  File "C:\Users\silen\AppData\Local\Programs\Python\Python310\lib\site-packages\celery\app\task.py", line 392, in __call__
    return self.run(*args, **kwargs)
  File "H:\_webdev\python+flutter\Nuclei\nuclei_backend\storage_sequencer\upload.py", line 49, in produce_cid
    with open(
FileNotFoundError: [Errno 2] No such file or directory: 'H:\\_webdev\\python+flutter\\Nuclei\\nuclei_backend\\storage_sequencer\\temp_\\tempf8734688-8c9d-43ce-8866-d97cf5dae6c1.txt'


-->
